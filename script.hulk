//====================================================
//==============EXPRESIONES ARITEMTICAS =========
//====================================================-
//42;
//-42;
//((((1 + 2) ^ 3) * 4) / 5);
//====================================================
// =========== STRINGS ===============
//====================================================

//print("Hello World");
//print("The message is Hello World");
//print("The meaning of life is " @ 42);


//====================================================
//========== FUNCIONES BUILT IN =============
//====================================================

//print(sin(2 * PI) ^ 2 + cos(3 * PI / log(4, 64)));
//{
//    print(42);
//    print(sin(PI/2));
//    print("Hello World");
//};


//====================================================
//========== FUNCIONES =============
//====================================================

//function s(a,b)=>a;
//print(s(2));
//function tan(x: Number): Number => sin(x) / cos(x);
//function cot(x: Number): Number => 1 / tan(x);

//function fib(n) => if (n == 0 || n == 1) 1 else fib(n-1) + fib(n-2);
//function tan(x) => sin(x) / cos(x);
//function cot(x) => 1 / tan(x);
// print(tan(PI) ** 2 + cot(PI) ** 2);
//function operate(x, y) {
//    print(x + y);
//    print(x - y);
//    print(x * y);
//    print(x / y);
//};
//print(sin(90*3.14/180));
//function h(x,y) => x+y;
//function g(x,y)=> h(x,y);
//function f(x,y)=> g(x,y);
//


//====================================================
//========== CLASES =============
//====================================================
// Test file for type declaration semantic checking

//type Point(x,y) {
//    x = x;
//    y = y;
//
//    getX() => self.x;
//    getY() => self.y;
//
//    setX(x) => self.x := x;
//    setY(y) => self.y := y;
//};
//
//type PolarPoint(phi, rho) inherits Point(rho * sin(phi), rho * cos(phi)){
//    rho() => sqrt(self.getX() ^ 2 + self.getY() ^ 2);
//    // ...
//};
//let pt = new PolarPoint(3,4) in {
//    pt.setX(2);
//    pt.setY(4);
//    print("rho: " @ pt.rho());
//};

//type Person(firstname, lastname) {
//    firstname = firstname;
//    lastname = lastname;
//    name() => self.firstname @@ self.lastname;
//};
//
//type Knight inherits Person {
//    name() => "Sir" @@ base();
//};
//
//let p = new Knight("Phil", "Collins") in
//    print(p.name()); 


//
//type vector (a:Number,b:Number) inherits Point {
//
//};

//type Person(firstname, lastname) {
//    firstname = firstname;
//    lastname = lastname;
//
//    name() => self.firstname @@ self.lastname;
//};
//
//type Knight inherits Person {
//    name() => "Sir" @@ base();
//}
//
//let p = new Knight("Phil", "Collins") in
//    print(p.name()); // prints 'Sir Phil Collins'

// Test attribute access
//let p = new Point() in {
//    print(p.getX());
//    print(p.getY());
//    p.setX(10);
//    p.setY(20);
//    print(p.getX() + 4);
//    print(p.getY());
//}; 
//type Pointa (x,y) {
//    x = x;
//    y = y;
//
//    getX() => self.x;
//    getY() => self.y;
//
//    setX(x) => self.x := x;
//    setY(y) => self.y := y;
//};
//
//let pt = new Pointa(3,4) in
//    print("x: " @ pt.getX() @ "; y: " @ pt.getY());

//====================================================
//========== IF ELSE =============
//====================================================

//if(3<8) 4 else 5;




//====================================================
//========== Let in  =============
//====================================================
//let x = 42 in print(x);
//let x:String = "lala", y : Number = 9 in print (y@x);

//let a = 4 in while(a>1){
//    print(a);
//    a:=a-1;
//};

//====================================================
//========== CICLOS  =============
//====================================================

//for ( i in range(1,3)){
//    print(i);
//};


//====================================================
//==========Type Conforming  =============
//====================================================

// Test file for type conforming (<=) relationship
// This file demonstrates all the conforming rules in HULK

// ====================================================
// REGLA 1: Todo tipo conforma a Object
// ====================================================
//type Animal() {
//    name() => "Animal";
//};
//
//type Dog() inherits Animal {
//    bark() => "Woof!";
//};
//
//type Cat() inherits Animal {
//    meow() => "Meow!";
//};

// ====================================================
// REGLA 2: Todo tipo conforma a sí mismo
// ====================================================
//let dog1: Dog = new Dog() in
//let dog2: Dog = new Dog() in
//    print("Dog conforms to Dog: " @ (dog1 == dog2));

// ====================================================
// REGLA 3: Si T1 hereda T2 entonces T1 <= T2
// ====================================================
//let dog: Animal = new Dog() in  // Dog <= Animal
//let cat: Animal = new Cat() in  // Cat <= Animal
//    print("Dog conforms to Animal: " @ (dog.name() == "Animal"));



// ====================================================
// REGLA 4: Solo Number, String, Boolean conforman a sí mismos
// ====================================================
//let x: Number = 42 in
//let y: String = "hello" in
//let z: Boolean = true in
//    print("Numbers conform to Number: " @ (x == 42));

// ====================================================
// REGLA 5: Transitividad - Si T1 <= T2 y T2 <= T3, entonces T1 <= T3
// ====================================================
//type Mammal() inherits Animal {
//    warmBlooded() => true;
//};
//
//type Canine() inherits Mammal {
//    packAnimal() => true;
//};
//
//let wolf: Animal = new Canine() in  // Canine <= Mammal <= Animal
//    print("Canine conforms to Animal through inheritance: " @ (wolf.name() == "Animal"));

// ====================================================
// REGLA 6: Lowest Common Ancestor (LCA)
// ====================================================
// En una expresión como: if (condition) new Dog() else new Cat()
// El tipo resultante debe ser Animal (LCA de Dog y Cat)
//
//let condition = true in
//let result = if (condition) new Dog() else new Cat() in
//    print("LCA of Dog and Cat is Animal: " @ (result.name() == "Animal"));
//
// ====================================================
// REGLA 7: Verificación de tipos en asignaciones
// ====================================================
//let animals: [Animal] = [new Dog(), new Cat(), new Canine()] in
//    print("Array of different animal types works with Animal type");

// ====================================================
// REGLA 8: Verificación de tipos en parámetros de función
// ====================================================
//function makeSound(animal: Animal) => animal.name();
//
//let dogSound = makeSound(new Dog()) in
//let catSound = makeSound(new Cat()) in
//    print("Function accepts subtypes: " @ dogSound @ " and " @ catSound);

// ====================================================
// REGLA 9: Verificación de tipos en retorno de función
// ====================================================
//function getRandomAnimal() => if (true) new Dog() else new Cat();
//
//let randomAnimal: Animal = getRandomAnimal() in
//    print("Function returns LCA type: " @ randomAnimal.name());

// ====================================================
// REGLA 10: Verificación de tipos en expresiones binarias
// ====================================================
//let animal1: Animal = new Dog() in
//let animal2: Animal = new Cat() in
//let areEqual = animal1 == animal2 in  // Debe ser válido porque ambos conforman a Animal
//    print("Comparison between subtypes is valid: " @ areEqual); 
//

//// [CODEGEN TESTS]
//
//print("Probando declaracion de variables e impresion de valores");
//let a = 2, b = 3, c = 4, d = 5 in {
//    print("hello, world");
//    print(a+b+c+d);
//    print(true);
//    print(false);
//};
//
//print("Probando declaracion de variables con condicionales e impresion de su valor:");
//let a = if(3 < 4) 5 else 10 in print(a);
//
//print("Probando bucle while");
//let a = 5 in {
//    while(a > 0){
//        print(a);
//        a := a - 1;
//    };
//};
//
//print("Probando funciones");
//
//print("Sucesor de 0");
//function successor(x) => x+1;
//print(successor(0));
//
//print("Funcion que devuelve Hello, World!");
//function hw() => "Hello, World";
//print(hw());
//
//print("Probando recursividad");
//print("n-esimo numero de fibonacci");
//print("fib(5)");
//function fib(n) => if(n < 2) 1 else fib(n-1) + fib(n-2);
//print(fib(5));
//
//print("Probando funcion con parametros dinamicos");
//print("f(x,y) => Hello, World!");
//function f(x,y) => "Hello, World!";
//
//print("f(a,b), donde a y b son strings.");
//print(f("a","b"));
//
//print("f(2,3)");
//print(f(2,3));
//
//print("f(true,false)");
//print(f(true,false));
//
//print("Probando otra funcion recursiva, suma recursiva hasta n");
//function sum_to(n) => if(n == 1) 0 else n + sum_to(n-1);
//print(sum_to(100));
//
//print("Probando for loops");
////[TO DO: FOR LOOPS]
//for(i in range(1,7)){
//    print("El valor de i es " @ i);
//    print("Moviendo i a " @ i + 1);  
//};
//
//print();
//print("Probando concatenaciones:");
//print(true @ "false");
//print("false" @ true);
//print("Hola " @ "Mundo");
//print("4"@2);
//
//function concat(x,y) => x @ y;
//print(concat("Hola, ", "Mundo!"));
//
//print("Probando tipos");

type Car(brand){
    wheels = 4;
    brand = brand;
    getBrand() => self.brand;
    getWheels() => self.wheels;
};

let a = new Car("mercedes") in print(a.getBrand());