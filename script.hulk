//====================================================
//==============EXPRESIONES ARITEMTICAS =========
//====================================================-
//42;
//-42;
//((((1 + 2) ^ 3) * 4) / 5);
//====================================================
// =========== STRINGS ===============
//====================================================

//print("Hello World");
//print("The message is Hello World");
//print("The meaning of life is " @ 42);


//====================================================
//========== FUNCIONES BUILT IN =============
//====================================================

//print(sin(2 * PI) ^ 2 + cos(3 * PI / log(4, 64)));
//{
//    print(42);
//    print(sin(PI/2));
//    print("Hello World");
//};








//====================================================
//========== FUNCIONES =============
//====================================================

//function s(a,b)=>a;
//print(s(2));
//function tan(x: Number): Number => sin(x) / cos(x);
//function cot(x: Number): Number => 1 / tan(x);

//function fib(n) => if (n == 0 || n == 1) 1 else fib(n-1) + fib(n-2);
//function tan(x) => sin(x) / cos(x);
//function cot(x) => 1 / tan(x);
// print(tan(PI) ** 2 + cot(PI) ** 2);
//function operate(x, y) {
//    print(x + y);
//    print(x - y);
//    print(x * y);
//    print(x / y);
//};
//print(sin(90*3.14/180));
//function h(x,y) => x+y;
//function g(x,y)=> h(x,y);
//function f(x,y)=> g(x,y);
//


//====================================================
//========== CLASES =============
//====================================================
// Test file for type declaration semantic checking

//type Point(x,y) {
//    x = x;
//    y = y;
//
//    getX() => self.x;
//    getY() => self.y;
//
//    setX(x) => self.x := x;
//    setY(y) => self.y := y;
//};
//
//type PolarPoint(phi, rho) inherits Point(rho * sin(phi), rho * cos(phi)){
//    rho() => sqrt(self.getX() ^ 2 + self.getY() ^ 2);
//    // ...
//};
//let pt = new PolarPoint(3,4) in {
//    pt.setX(2);
//    pt.setY(4);
//    print("rho: " @ pt.rho());
//};

type Person(firstname, lastname) {
    firstname = firstname;
    lastname = lastname;
    name() => self.firstname @@ self.lastname;
};

type Knight inherits Person {
    name() => "Sir" @@ base();
};

let p = new Knight("Phil", "Collins") in
    print(p.name()); 

    
//
//type vector (a:Number,b:Number) inherits Point {
//
//};

//type Person(firstname, lastname) {
//    firstname = firstname;
//    lastname = lastname;
//
//    name() => self.firstname @@ self.lastname;
//};
//
//type Knight inherits Person {
//    name() => "Sir" @@ base();
//}
//
//let p = new Knight("Phil", "Collins") in
//    print(p.name()); // prints 'Sir Phil Collins'

// Test attribute access
//let p = new Point() in {
//    print(p.getX());
//    print(p.getY());
//    p.setX(10);
//    p.setY(20);
//    print(p.getX() + 4);
//    print(p.getY());
//}; 
//type Pointa (x,y) {
//    x = x;
//    y = y;
//
//    getX() => self.x;
//    getY() => self.y;
//
//    setX(x) => self.x := x;
//    setY(y) => self.y := y;
//};
//
//let pt = new Pointa(3,4) in
//    print("x: " @ pt.getX() @ "; y: " @ pt.getY());

//====================================================
//========== IF ELSE =============
//====================================================

//if(3<8) 4 else 5;




//====================================================
//========== Let in  =============
//====================================================
//let x = 42 in print(x);
//let x:String = "lala", y : Number = 9 in print (y@x);

//let a = 4 in while(a>1){
//    print(a);
//    a:=a-1;
//};

//====================================================
//========== CICLOS  =============
//====================================================

//for ( i in range(1,3)){
//    print(i);
//};