//====================================================
//==============EXPRESIONES ARITEMTICAS =========
//====================================================-
//42;
//-42;
//((((1 + 2) ^ 3) * 4) / 5);
//====================================================
// =========== STRINGS ===============
//====================================================

//print("Hello World");
//print("The message is Hello World");
//print("The meaning of life is " @ 42);


//====================================================
//========== FUNCIONES BUILT IN =============
//====================================================

//print(sin(2 * PI) ^ 2 + cos(3 * PI / log(4, 64)));
//{
//    print(42);
//    print(sin(PI/2));
//    print("Hello World");
//};


//====================================================
//========== FUNCIONES =============
//====================================================
// Test file for function return type declarations

// Function with explicit return type - should work
//function add(x: Number, y: Number) : Number => x + y;
//
//// Function with explicit return type and block body - should work
//function multiply(x: Number, y: Number) : Number {
//    x * y;
//};
//
//// Function without explicit return type - should infer Number
//function subtract(x: Number, y: Number) => x - y;
//
//// Function with wrong return type - should give error
////function wrongReturn(x: Number) : String => x + 1;
//
//// Function with compatible return type - should work
//function compatibleReturn(x: Number) : Number => x * 2;
//
//// Function with no parameters and explicit return type
//function getPi() : Number => 3.14159;
//
//// Function with no parameters and no explicit return type
//function getE() => 2.71828;

// Test calls
//add(5, 3);
//multiply(4, 6);
//subtract(10, 3);
//compatibleReturn(7);
//getPi();
//getE();
//function s(a,b)=>a;
//print(s(2));
//function tan(x: Number): Number => sin(x) / cos(x);
//function cot(x: Number): Number => 1 / tan(x);
//function fib(n) => if (n == 0 || n == 1) 1 else fib(n-1) + fib(n-2);
//
// print(tan(PI) ** 2 + cot(PI) ** 2);
//function operate(x, y) {
//    print(x + y);
//    print(x - y);
//    print(x * y);
//    print(x / y);
//};
//print(sin(90*3.14/180));
//function h(x,y) => x+y;
//function g(x,y)=> h(x,y);
//function f(x,y)=> g(x,y);



//====================================================
//========== CLASES =============
//====================================================
// Test file for type declaration semantic checking

//type Point(x,y) {
//    x = x;
//    y = y;
//
//    getX() => self.x;
//    getY() => self.y;
//
//    setX(x) => self.x := x;
//    setY(y) => self.y := y;
//    norm() => (self.x^2 + self.y^2)^(1/2);
//};
//
//type PolarPoint(phi, rho) inherits Point(rho * sin(phi), rho * cos(phi)){
//    rho() => sqrt(self.getX() ^ 2 + self.getY() ^ 2);
//    // ...
//};
//let pt = new PolarPoint(3,4) in {
//    pt.setX(2);
//    pt.setY(4);
//    print("rho: " @ pt.rho());
//};
//type Person(firstname, lastname) {
//    firstname = firstname;
//    lastname = lastname;
//    name() => self.firstname @@ self.lastname;
//};
//
//type Knight inherits Person {
//    name() => "Sir" @@ base();
//};
//
//let p = new Knight("Phil", "Collins") in
//    print(p.name()); 
//

//
//type vector (a:Number,b:Number) inherits Point {
//
//};

//type Person(firstname, lastname) {
//    firstname = firstname;
//    lastname = lastname;
//
//    name() => self.firstname @@ self.lastname;
//};
//
//type Knight inherits Person {
//    name() => "Sir" @@ base();
//}
//
//let p = new Knight("Phil", "Collins") in
//    print(p.name()); // prints 'Sir Phil Collins'

// Test attribute access
//let p = new Point() in {
//    print(p.getX());
//    print(p.getY());
//    p.setX(10);
//    p.setY(20);
//    print(p.getX() + 4);
//    print(p.getY());
//}; 
//type Pointa (x,y) {
//    x = x;
//    y = y;
//
//    getX() => self.x;
//    getY() => self.y;
//
//    setX(x) => self.x := x;
//    setY(y) => self.y := y;
//};
//
//let pt = new Pointa(3,4) in
//    print("x: " @ pt.getX() @ "; y: " @ pt.getY());

//// Type with typed parameters
//type Point(x: Number, y: Number) {
//    // Attributes with explicit types
//    x: Number = x;
//    y: Number = y;
//    
//    // Method with typed parameters and return type
//    distance(other: Point) : Number => sqrt((self.x - other.x)^2 + (self.y - other.y)^2);
//    
//    // Method with typed parameters but inferred return type
//    add(other: Point) => new Point(self.x + other.x, self.y + other.y);
//    
//    // Method with no parameters and explicit return type
//    magnitude() : Number => sqrt(self.x^2 + self.y^2);
//    
//    // Method with no parameters and inferred return type
//    toString() => "Point(" @ self.x @ ", " @ self.y @ ")";
//};
//
//// Type with inheritance and typed parameters
//type Circle(center: Point, radius: Number) inherits Object {
//    // Attributes with explicit types
//    center: Point = center;
//    radius: Number = radius;
//    
//    // Method with typed parameters and return type
//    area() : Number => PI * self.radius^2;
//    
//    // Method with typed parameters but inferred return type
//    contains(point: Point) => (point.x - self.center.x)^2 + (point.y - self.center.y)^2 <= self.radius^2;
//    
//    // Method with no parameters and explicit return type
//    circumference() : Number => 2 * PI * self.radius;
//};
//
//// Type with no parameters
//type Counter {
//    // Attribute with explicit type
//    count: Number = 0;
//    
//    // Method with typed parameters and return type
//    increment(amount: Number) : Number {
//        self.count := self.count + amount;
//        self.count;
//    };
//    
//    // Method with no parameters and explicit return type
//    getCount() : Number => self.count;
//    
//    // Method with no parameters and inferred return type
//    reset() => self.count := 0;
//};
//
//// Test function with typed parameters and return type
//function createPoint(x: Number, y: Number) : Point => new Point(x, y);
//
//// Test function with typed parameters but inferred return type
//function distance(p1: Point, p2: Point) => p1.distance(p2);
//
//// Test calls
//let p1 = createPoint(3, 4) in
//let p2 = createPoint(6, 8) in
//let c = new Circle(p1, 5) in
//let counter = new Counter() in
//{
//    print("Distance: " @ distance(p1, p2));
//    print("Circle area: " @ c.area());
//    print("Point magnitude: " @ p1.magnitude());
//    print("Counter count: " @ counter.getCount());
//    counter.increment(10);
//    print("After increment: " @ counter.getCount());
//};
//
//type Bird {
//    // ...
//};
//
//type Plane {
//    // ...
//};
//
//type Superman {
//    // ...
//};
//
//let x = new Superman() in
//    print(
//        if (x is Bird) "It's bird!"
//        elif (x is Plane) "It's a plane!"
//        else "No, it's Superman!"
//    );


//type A {
//    // ...
//};
//
//type B inherits A {
//    // ...
//};
//
//type C inherits A {
//    // ...
//};
//
//let x : A = if (rand() < 0.5) new B() else new C() in
//    if (x is B)
//        let y : B = x as B in {
//           print("se pudo");
//        }
//    else {
//        print("no se pudo");
//    };
//====================================================
//========== IF ELSE =============
//====================================================

//if(3<8) 4 else 5;




//====================================================
//========== Let in  =============
//====================================================
//let x = 42 in print(x);
//let x:String = "lala", y : Number = 9 in print (y@x);

//let a = 4 in while(a>1){
//    print(a);
//    a:=a-1;
//};

//====================================================
//========== CICLOS  =============
//====================================================

//for ( i in range(1,3)){
//    print(i);
//};


//====================================================
//==========Type Conforming  =============
//====================================================

// Test file for type conforming (<=) relationship
// This file demonstrates all the conforming rules in HULK

// ====================================================
// REGLA 1: Todo tipo conforma a Object
// ====================================================
//type Animal() {
//    name() => "Animal";
//};
//
//type Dog() inherits Animal {
//    bark() => "Woof!";
//};
//
//type Cat() inherits Animal {
//    meow() => "Meow!";
//};

// ====================================================
// REGLA 2: Todo tipo conforma a sí mismo
// ====================================================
//let dog1: Dog = new Dog() in
//let dog2: Dog = new Dog() in
//    print("Dog conforms to Dog: " @ (dog1 == dog2));

// ====================================================
// REGLA 3: Si T1 hereda T2 entonces T1 <= T2
// ====================================================
//let dog: Animal = new Dog() in  // Dog <= Animal
//let cat: Animal = new Cat() in  // Cat <= Animal
//    print("Dog conforms to Animal: " @ (dog.name() == "Animal"));



// ====================================================
// REGLA 4: Solo Number, String, Boolean conforman a sí mismos
// ====================================================
//let x: Number = 42 in
//let y: String = "hello" in
//let z: Boolean = true in
//    print("Numbers conform to Number: " @ (x == 42));

// ====================================================
// REGLA 5: Transitividad - Si T1 <= T2 y T2 <= T3, entonces T1 <= T3
// ====================================================
//type Mammal() inherits Animal {
//    warmBlooded() => true;
//};
//
//type Canine() inherits Mammal {
//    packAnimal() => true;
//};
//
//let wolf: Animal = new Canine() in  // Canine <= Mammal <= Animal
//    print("Canine conforms to Animal through inheritance: " @ (wolf.name() == "Animal"));

// ====================================================
// REGLA 6: Lowest Common Ancestor (LCA)
// ====================================================
// En una expresión como: if (condition) new Dog() else new Cat()
// El tipo resultante debe ser Animal (LCA de Dog y Cat)
//
//let condition = true in
//let result = if (condition) new Dog() else new Cat() in
//    print("LCA of Dog and Cat is Animal: " @ (result.name() == "Animal"));
//
// ====================================================
// REGLA 7: Verificación de tipos en asignaciones
// ====================================================
//let animals: [Animal] = [new Dog(), new Cat(), new Canine()] in
//    print("Array of different animal types works with Animal type");

// ====================================================
// REGLA 8: Verificación de tipos en parámetros de función
// ====================================================
//function makeSound(animal: Animal) => animal.name();
//
//let dogSound = makeSound(new Dog()) in
//let catSound = makeSound(new Cat()) in
//    print("Function accepts subtypes: " @ dogSound @ " and " @ catSound);

// ====================================================
// REGLA 9: Verificación de tipos en retorno de función
// ====================================================
//function getRandomAnimal() => if (true) new Dog() else new Cat();
//
//let randomAnimal: Animal = getRandomAnimal() in
//    print("Function returns LCA type: " @ randomAnimal.name());

// ====================================================
// REGLA 10: Verificación de tipos en expresiones binarias
// ====================================================
//let animal1: Animal = new Dog() in
//let animal2: Animal = new Cat() in
//let areEqual = animal1 == animal2 in  // Debe ser válido porque ambos conforman a Animal
//    print("Comparison between subtypes is valid: " @ areEqual); 
//
//
//
//
//
////  ===[CODEGEN TESTS]===
//// [Programa Basico]
//42;
//3.2;
//"Hello, World!";
//true;
//false;
////[Imprimiendo tipos de datos basicos]
//print(42);
//print(3.2);
//print("Hello, World!");
//print(true);
//print(false);
//// [Imprimiendo Operaciones Aritmeticas]
//print(42 + 1);  //   43
//print(42 - 1);  //   41
//print(2 - 3);   //   -1
//print(2 * 3);   //   6
//print(2.2 + 1); //   3.2
//print(2/3);     //   0.666667
//print(2^3);     //   8.000000
//
//// [Imprimiendo Operaciones de Comparacion]
//print(5 == 5);                  // true
//print(5 == 3);                  // false
//print(3.14 == 3.14);            // true
//print(3.14 == 2.5);             // false
//print(true == true);            // true
//print(true == false);           // false
//print("hello" == "hello");      // true
//print("hello" == "world");      // false
//print(10 == 10.0);              // true
//print(5 != 3);                  // true
//print(3.14 != 2.5);             // true
//print(true != false);           // true
//print("hello" != "world");      // true
//print(2^3 == 8.0);              // false
//print(2 < 3);                   // true
//print(2.2 == 2.3);              // false
//print(5 >= 3);                  // true
//print(6 <= 3);                  // false
//
////[Imprimiendo Operaciones Logicas]
//print(true && false);                                         // false
//print(false && true);                                         // false
//print(true || true);                                          // true
//print(true && true);                                          // true
//print(false || true);                                         // true
//print(2^(3+2)^2 == 2^25);                                     // true
//print("Hello" @ " World");                                    // Hello, World
//print(42 @ " is the answer");                                 // 42 is the answer
//print("The value is: " @ 3.14);                               // The value is 3.14
//print(true @ " is a boolean");                                // true is a boolean
//print(10 @ " + " @ 5 @ " = " @ 15);                           // 10 + 5 = 15
//print("Pi is " @ 3.14159 @ " and e is " @ 2.71828);           // Pi is 3.14159 and e is 2.718228
//print(false @ " is not " @ true); 
//
//print("Probando declaracion de variables e impresion de valores");
//let a = 2, b = 3, c = 4, d = 5 in {
//    print("hello, world");
//    print(a+b+c+d);
//    print(a@b@c@d);
//    print(true);
//    print(false);
//};
//print("Probando declaracion de variables con condicionales e impresion de su valor:");
//let a = if(3 > 4) "2" else true in {
//    print(a);
//    a := 4;
//    print(a+1);
//};
//print("Probando bucle while");
//let a = 5 in {
//    while(a > 0){
//        print(a);
//        a := a - 1;
//    };
//};
//
//print("Probando funciones");
//print("Sucesor de 0");
//function successor(x) => x+1;
//print(successor(0));
//
//print("Funcion que devuelve Hello, World!");
//function hw() => "Hello, World";
//print(hw());
//
//print("Probando recursividad");
//print("n-esimo numero de fibonacci");
//function fib(n) => if(n <= 1 ) 1 else fib(n-1) + fib(n-2);
//print("fib(5)");
//print(fib(5));
//
//print();
//print("Probando funcion con parametros dinamicos");
//function f(x,y) => "Hello, World";
//print("f(x,y) => Hello, World!");
//print("f(a,b), donde a y b son strings.");
//print(f("a","b"));
//print("f(2,3)");
//print(f(2,3));
//print("f(true,false)");
//print(f(true,false));
//print();
//
//print("Probando funcion con parametro dinamico y tipo de retorno desconocido");
//function id(x) => x;
//print(id("asd"));
//print(id("true"));
//print(id(true));
//print(id(1));
//
//print("Probando otra funcion recursiva, suma recursiva hasta n");
//function sum_to(n) => if(n == 1) 0 else n + sum_to(n-1);
//let b = sum_to(2) in let a = b in print(a);
//print(sum_to(100));
//
//print("Probando for loops");
//for(i in range(1,7)){
//    print("El valor de i es " @ i);
//    print("Moviendo i a " @ i + 1);  
//};
//
//print();
//print("Probando concatenaciones:");
//print(true @ "false");
//print("false" @ true);
//print("Hola " @ "Mundo");
//print("4"@2);
//
//function concat(x,y) => x @ y;
//print(concat("Hola, ", "Mundo!"));
//
//print("Probando tipos");
//
type Vector(x,y){
    x = x;
    y = y;
    getX() => self.x;
    getY() => self.y;
    setX(newX) => self.x := newX;
    setY(newY) => self.y := newY;
    norm() => (self.x^2 + self.y^2)^(1/2);
};
//
let a = new Vector(3,2) in {
    print(a.getX());
    print(a.getY());
    //print(a.norm());
    //a.setX(10);
    //a.setY(10);
    //print(a.norm());
};
//
//type Animal(name,age){
//    name = name;
//    age = age;
//    speak() => "regular Animal noise";
//    getName() => self.name;
//    getAge() => self.age;
//};
//
//
//let a = new Animal("Amalia",1) in {
//    print(a.speak());
//    print(a.getName());
//    print(a.getAge());
//};
//
//type Dog() inherits Animal{
//    bark() => "Woof, Woof!";
//};
//
//let d = new Dog("Noel",2) in {
//    print(d.speak());
//    print(d.bark());
//    print(d.getName());
//};
//
//type Chihuahua() inherits Dog{
//};
//
//
//let c = new Chihuahua("Alejandro",3) in {
//    print(c.speak());
//    print(c.bark());
//    print(c.getName());
//};
//
//
//let a = 42, b = true in print(a@b);
//
//
//function kk(x:String,y:String) => x == y;
//
//
//type A{
//
//};
//
//type B inherits A{
//    f() => "A";
//};
//
//let x = -5 in let y = if(x > 0) new A() else new B() in print(y.f());
//    f() => "B";